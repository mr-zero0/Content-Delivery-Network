// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: mgmtApi.proto

package mgmtApi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MgmtApi_UpdateDsList_FullMethodName          = "/mgmtApi.MgmtApi/UpdateDsList"
	MgmtApi_UpdateConfigNode_FullMethodName      = "/mgmtApi.MgmtApi/UpdateConfigNode"
	MgmtApi_InvalidateCache_FullMethodName       = "/mgmtApi.MgmtApi/InvalidateCache"
	MgmtApi_InvalidateCacheStatus_FullMethodName = "/mgmtApi.MgmtApi/InvalidateCacheStatus"
)

// MgmtApiClient is the client API for MgmtApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition for the Management API
type MgmtApiClient interface {
	// Updates the list of delivery services
	UpdateDsList(ctx context.Context, in *UpdateDsListRequest, opts ...grpc.CallOption) (*UpdateDsListResponse, error)
	// Updates the cache node configuration
	UpdateConfigNode(ctx context.Context, in *UpdateConfigNodeRequest, opts ...grpc.CallOption) (*UpdateConfigNodeResponse, error)
	// Invalidates cache for a specific pattern
	InvalidateCache(ctx context.Context, in *InvalidateCacheRequest, opts ...grpc.CallOption) (*InvalidateCacheResponse, error)
	// Gets Invalidation status
	InvalidateCacheStatus(ctx context.Context, in *InvalidateCacheStatusRequest, opts ...grpc.CallOption) (*InvalidateCacheStatusResponse, error)
}

type mgmtApiClient struct {
	cc grpc.ClientConnInterface
}

func NewMgmtApiClient(cc grpc.ClientConnInterface) MgmtApiClient {
	return &mgmtApiClient{cc}
}

func (c *mgmtApiClient) UpdateDsList(ctx context.Context, in *UpdateDsListRequest, opts ...grpc.CallOption) (*UpdateDsListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDsListResponse)
	err := c.cc.Invoke(ctx, MgmtApi_UpdateDsList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtApiClient) UpdateConfigNode(ctx context.Context, in *UpdateConfigNodeRequest, opts ...grpc.CallOption) (*UpdateConfigNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateConfigNodeResponse)
	err := c.cc.Invoke(ctx, MgmtApi_UpdateConfigNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtApiClient) InvalidateCache(ctx context.Context, in *InvalidateCacheRequest, opts ...grpc.CallOption) (*InvalidateCacheResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InvalidateCacheResponse)
	err := c.cc.Invoke(ctx, MgmtApi_InvalidateCache_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtApiClient) InvalidateCacheStatus(ctx context.Context, in *InvalidateCacheStatusRequest, opts ...grpc.CallOption) (*InvalidateCacheStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InvalidateCacheStatusResponse)
	err := c.cc.Invoke(ctx, MgmtApi_InvalidateCacheStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MgmtApiServer is the server API for MgmtApi service.
// All implementations must embed UnimplementedMgmtApiServer
// for forward compatibility.
//
// Service definition for the Management API
type MgmtApiServer interface {
	// Updates the list of delivery services
	UpdateDsList(context.Context, *UpdateDsListRequest) (*UpdateDsListResponse, error)
	// Updates the cache node configuration
	UpdateConfigNode(context.Context, *UpdateConfigNodeRequest) (*UpdateConfigNodeResponse, error)
	// Invalidates cache for a specific pattern
	InvalidateCache(context.Context, *InvalidateCacheRequest) (*InvalidateCacheResponse, error)
	// Gets Invalidation status
	InvalidateCacheStatus(context.Context, *InvalidateCacheStatusRequest) (*InvalidateCacheStatusResponse, error)
	mustEmbedUnimplementedMgmtApiServer()
}

// UnimplementedMgmtApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMgmtApiServer struct{}

func (UnimplementedMgmtApiServer) UpdateDsList(context.Context, *UpdateDsListRequest) (*UpdateDsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDsList not implemented")
}
func (UnimplementedMgmtApiServer) UpdateConfigNode(context.Context, *UpdateConfigNodeRequest) (*UpdateConfigNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfigNode not implemented")
}
func (UnimplementedMgmtApiServer) InvalidateCache(context.Context, *InvalidateCacheRequest) (*InvalidateCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateCache not implemented")
}
func (UnimplementedMgmtApiServer) InvalidateCacheStatus(context.Context, *InvalidateCacheStatusRequest) (*InvalidateCacheStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateCacheStatus not implemented")
}
func (UnimplementedMgmtApiServer) mustEmbedUnimplementedMgmtApiServer() {}
func (UnimplementedMgmtApiServer) testEmbeddedByValue()                 {}

// UnsafeMgmtApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MgmtApiServer will
// result in compilation errors.
type UnsafeMgmtApiServer interface {
	mustEmbedUnimplementedMgmtApiServer()
}

func RegisterMgmtApiServer(s grpc.ServiceRegistrar, srv MgmtApiServer) {
	// If the following call pancis, it indicates UnimplementedMgmtApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MgmtApi_ServiceDesc, srv)
}

func _MgmtApi_UpdateDsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtApiServer).UpdateDsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtApi_UpdateDsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtApiServer).UpdateDsList(ctx, req.(*UpdateDsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtApi_UpdateConfigNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtApiServer).UpdateConfigNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtApi_UpdateConfigNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtApiServer).UpdateConfigNode(ctx, req.(*UpdateConfigNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtApi_InvalidateCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidateCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtApiServer).InvalidateCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtApi_InvalidateCache_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtApiServer).InvalidateCache(ctx, req.(*InvalidateCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtApi_InvalidateCacheStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidateCacheStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtApiServer).InvalidateCacheStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtApi_InvalidateCacheStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtApiServer).InvalidateCacheStatus(ctx, req.(*InvalidateCacheStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MgmtApi_ServiceDesc is the grpc.ServiceDesc for MgmtApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MgmtApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mgmtApi.MgmtApi",
	HandlerType: (*MgmtApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateDsList",
			Handler:    _MgmtApi_UpdateDsList_Handler,
		},
		{
			MethodName: "UpdateConfigNode",
			Handler:    _MgmtApi_UpdateConfigNode_Handler,
		},
		{
			MethodName: "InvalidateCache",
			Handler:    _MgmtApi_InvalidateCache_Handler,
		},
		{
			MethodName: "InvalidateCacheStatus",
			Handler:    _MgmtApi_InvalidateCacheStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mgmtApi.proto",
}
