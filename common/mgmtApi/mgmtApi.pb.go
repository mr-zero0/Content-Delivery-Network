// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v5.29.3
// source: mgmtApi.proto

package mgmtApi

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request to update the list of delivery services
type UpdateDsListRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ServiceList   []*DeliveryService     `protobuf:"bytes,1,rep,name=serviceList,proto3" json:"serviceList,omitempty"` // List of delivery services
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateDsListRequest) Reset() {
	*x = UpdateDsListRequest{}
	mi := &file_mgmtApi_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDsListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDsListRequest) ProtoMessage() {}

func (x *UpdateDsListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmtApi_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDsListRequest.ProtoReflect.Descriptor instead.
func (*UpdateDsListRequest) Descriptor() ([]byte, []int) {
	return file_mgmtApi_proto_rawDescGZIP(), []int{0}
}

func (x *UpdateDsListRequest) GetServiceList() []*DeliveryService {
	if x != nil {
		return x.ServiceList
	}
	return nil
}

// Response for updating the list of delivery services
type UpdateDsListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // Indicates if the operation was successful
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`  // Additional message or error details
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateDsListResponse) Reset() {
	*x = UpdateDsListResponse{}
	mi := &file_mgmtApi_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDsListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDsListResponse) ProtoMessage() {}

func (x *UpdateDsListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmtApi_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDsListResponse.ProtoReflect.Descriptor instead.
func (*UpdateDsListResponse) Descriptor() ([]byte, []int) {
	return file_mgmtApi_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateDsListResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateDsListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Request to update the cache node configuration
type UpdateConfigNodeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Node          *CacheNode             `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"` // Cache node details
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateConfigNodeRequest) Reset() {
	*x = UpdateConfigNodeRequest{}
	mi := &file_mgmtApi_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateConfigNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConfigNodeRequest) ProtoMessage() {}

func (x *UpdateConfigNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmtApi_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConfigNodeRequest.ProtoReflect.Descriptor instead.
func (*UpdateConfigNodeRequest) Descriptor() ([]byte, []int) {
	return file_mgmtApi_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateConfigNodeRequest) GetNode() *CacheNode {
	if x != nil {
		return x.Node
	}
	return nil
}

// Response for updating the cache node configuration
type UpdateConfigNodeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // Indicates if the operation was successful
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`  // Additional message or error details
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateConfigNodeResponse) Reset() {
	*x = UpdateConfigNodeResponse{}
	mi := &file_mgmtApi_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateConfigNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConfigNodeResponse) ProtoMessage() {}

func (x *UpdateConfigNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmtApi_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConfigNodeResponse.ProtoReflect.Descriptor instead.
func (*UpdateConfigNodeResponse) Descriptor() ([]byte, []int) {
	return file_mgmtApi_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateConfigNodeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateConfigNodeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Request to invalidate cache
type InvalidateCacheRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	InvalidationID string                 `protobuf:"bytes,1,opt,name=invalidationID,proto3" json:"invalidationID,omitempty"` // Unique ID for the invalidation request
	Pattern        string                 `protobuf:"bytes,2,opt,name=pattern,proto3" json:"pattern,omitempty"`               // Key to invalidate in the cache
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *InvalidateCacheRequest) Reset() {
	*x = InvalidateCacheRequest{}
	mi := &file_mgmtApi_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InvalidateCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidateCacheRequest) ProtoMessage() {}

func (x *InvalidateCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmtApi_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidateCacheRequest.ProtoReflect.Descriptor instead.
func (*InvalidateCacheRequest) Descriptor() ([]byte, []int) {
	return file_mgmtApi_proto_rawDescGZIP(), []int{4}
}

func (x *InvalidateCacheRequest) GetInvalidationID() string {
	if x != nil {
		return x.InvalidationID
	}
	return ""
}

func (x *InvalidateCacheRequest) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

// Response for invalidating cache
type InvalidateCacheResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // Indicates if the operation was successful
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`  // Additional message or error details
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InvalidateCacheResponse) Reset() {
	*x = InvalidateCacheResponse{}
	mi := &file_mgmtApi_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InvalidateCacheResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidateCacheResponse) ProtoMessage() {}

func (x *InvalidateCacheResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmtApi_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidateCacheResponse.ProtoReflect.Descriptor instead.
func (*InvalidateCacheResponse) Descriptor() ([]byte, []int) {
	return file_mgmtApi_proto_rawDescGZIP(), []int{5}
}

func (x *InvalidateCacheResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *InvalidateCacheResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Request to get invalidation status
type InvalidateCacheStatusRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	InvalidationID string                 `protobuf:"bytes,1,opt,name=invalidationID,proto3" json:"invalidationID,omitempty"` // Unique ID for the invalidation request
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *InvalidateCacheStatusRequest) Reset() {
	*x = InvalidateCacheStatusRequest{}
	mi := &file_mgmtApi_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InvalidateCacheStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidateCacheStatusRequest) ProtoMessage() {}

func (x *InvalidateCacheStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmtApi_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidateCacheStatusRequest.ProtoReflect.Descriptor instead.
func (*InvalidateCacheStatusRequest) Descriptor() ([]byte, []int) {
	return file_mgmtApi_proto_rawDescGZIP(), []int{6}
}

func (x *InvalidateCacheStatusRequest) GetInvalidationID() string {
	if x != nil {
		return x.InvalidationID
	}
	return ""
}

// Response for getting invalidation status
type InvalidateCacheStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // Indicates if the operation was successful
	Status        string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`    // Status of the invalidation request
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InvalidateCacheStatusResponse) Reset() {
	*x = InvalidateCacheStatusResponse{}
	mi := &file_mgmtApi_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InvalidateCacheStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidateCacheStatusResponse) ProtoMessage() {}

func (x *InvalidateCacheStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmtApi_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidateCacheStatusResponse.ProtoReflect.Descriptor instead.
func (*InvalidateCacheStatusResponse) Descriptor() ([]byte, []int) {
	return file_mgmtApi_proto_rawDescGZIP(), []int{7}
}

func (x *InvalidateCacheStatusResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *InvalidateCacheStatusResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// Config represents the configuration for the cache node
type Config struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ServiceList   []*DeliveryService     `protobuf:"bytes,1,rep,name=service_list,json=serviceList,proto3" json:"service_list,omitempty"` // List of delivery services
	Node          *CacheNode             `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`                                  // Cache node details
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Config) Reset() {
	*x = Config{}
	mi := &file_mgmtApi_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_mgmtApi_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_mgmtApi_proto_rawDescGZIP(), []int{8}
}

func (x *Config) GetServiceList() []*DeliveryService {
	if x != nil {
		return x.ServiceList
	}
	return nil
}

func (x *Config) GetNode() *CacheNode {
	if x != nil {
		return x.Node
	}
	return nil
}

// DeliveryService represents a single delivery service
type DeliveryService struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                 // Name of the delivery service
	ClientURL     string                 `protobuf:"bytes,2,opt,name=clientURL,proto3" json:"clientURL,omitempty"`       // URL from the client
	OriginURL     string                 `protobuf:"bytes,3,opt,name=originURL,proto3" json:"originURL,omitempty"`       // URL to the origin
	RewriteRules  []*RewriteRule         `protobuf:"bytes,4,rep,name=rewriteRules,proto3" json:"rewriteRules,omitempty"` // List of rewrite rules
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeliveryService) Reset() {
	*x = DeliveryService{}
	mi := &file_mgmtApi_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeliveryService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliveryService) ProtoMessage() {}

func (x *DeliveryService) ProtoReflect() protoreflect.Message {
	mi := &file_mgmtApi_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliveryService.ProtoReflect.Descriptor instead.
func (*DeliveryService) Descriptor() ([]byte, []int) {
	return file_mgmtApi_proto_rawDescGZIP(), []int{9}
}

func (x *DeliveryService) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeliveryService) GetClientURL() string {
	if x != nil {
		return x.ClientURL
	}
	return ""
}

func (x *DeliveryService) GetOriginURL() string {
	if x != nil {
		return x.OriginURL
	}
	return ""
}

func (x *DeliveryService) GetRewriteRules() []*RewriteRule {
	if x != nil {
		return x.RewriteRules
	}
	return nil
}

// RewriteRule represents a rule for rewriting HTTP headers
type RewriteRule struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HeaderName    string                 `protobuf:"bytes,1,opt,name=headerName,proto3" json:"headerName,omitempty"` // Name of the HTTP header
	Operation     int32                  `protobuf:"varint,2,opt,name=operation,proto3" json:"operation,omitempty"`  // Operation to perform (e.g., add, overwrite, delete)
	Value         string                 `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`           // Value for add/overwrite operations
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RewriteRule) Reset() {
	*x = RewriteRule{}
	mi := &file_mgmtApi_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RewriteRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewriteRule) ProtoMessage() {}

func (x *RewriteRule) ProtoReflect() protoreflect.Message {
	mi := &file_mgmtApi_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewriteRule.ProtoReflect.Descriptor instead.
func (*RewriteRule) Descriptor() ([]byte, []int) {
	return file_mgmtApi_proto_rawDescGZIP(), []int{10}
}

func (x *RewriteRule) GetHeaderName() string {
	if x != nil {
		return x.HeaderName
	}
	return ""
}

func (x *RewriteRule) GetOperation() int32 {
	if x != nil {
		return x.Operation
	}
	return 0
}

func (x *RewriteRule) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// CacheNode represents a single cache node
type CacheNode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`              // name of the cache node
	Ip            string                 `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`                  // IP address of the cache node
	Port          int32                  `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`             // Port for the cache node to listen
	Type          string                 `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`              // Type of the node (e.g., Mid, Edge)
	ParentIP      string                 `protobuf:"bytes,5,opt,name=parentIP,proto3" json:"parentIP,omitempty"`      // IP of the upstream cache (empty if no upstream)
	ParentPort    int32                  `protobuf:"varint,6,opt,name=parentPort,proto3" json:"parentPort,omitempty"` // Port for the upstream cache
	PromPort      int32                  `protobuf:"varint,7,opt,name=promPort,proto3" json:"promPort,omitempty"`     // Port for the prometheus scrape point
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CacheNode) Reset() {
	*x = CacheNode{}
	mi := &file_mgmtApi_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CacheNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheNode) ProtoMessage() {}

func (x *CacheNode) ProtoReflect() protoreflect.Message {
	mi := &file_mgmtApi_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheNode.ProtoReflect.Descriptor instead.
func (*CacheNode) Descriptor() ([]byte, []int) {
	return file_mgmtApi_proto_rawDescGZIP(), []int{11}
}

func (x *CacheNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CacheNode) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *CacheNode) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *CacheNode) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CacheNode) GetParentIP() string {
	if x != nil {
		return x.ParentIP
	}
	return ""
}

func (x *CacheNode) GetParentPort() int32 {
	if x != nil {
		return x.ParentPort
	}
	return 0
}

func (x *CacheNode) GetPromPort() int32 {
	if x != nil {
		return x.PromPort
	}
	return 0
}

var File_mgmtApi_proto protoreflect.FileDescriptor

var file_mgmtApi_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x67, 0x6d, 0x74, 0x41, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x6d, 0x67, 0x6d, 0x74, 0x41, 0x70, 0x69, 0x22, 0x51, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3a, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x41, 0x70, 0x69, 0x2e, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4a, 0x0a, 0x14, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x41, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x4e, 0x0a, 0x18, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x5a, 0x0a, 0x16, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x22, 0x4d, 0x0a, 0x17, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x46, 0x0a, 0x1c, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x51, 0x0a,
	0x1d, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x6d, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x41, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x41, 0x70, 0x69, 0x2e,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22,
	0x9b, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x55, 0x52, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x55, 0x52, 0x4c, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x55,
	0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x55, 0x52, 0x4c, 0x12, 0x38, 0x0a, 0x0c, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x67, 0x6d, 0x74,
	0x41, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x0c, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x61, 0x0a,
	0x0b, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xaf, 0x01, 0x0a, 0x09, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x49, 0x50, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x49, 0x50, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6d, 0x50, 0x6f,
	0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6d, 0x50, 0x6f,
	0x72, 0x74, 0x32, 0xed, 0x02, 0x0a, 0x07, 0x4d, 0x67, 0x6d, 0x74, 0x41, 0x70, 0x69, 0x12, 0x4b,
	0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c,
	0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x41, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6d,
	0x67, 0x6d, 0x74, 0x41, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x10, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x20, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x41, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x41, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x0f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x1f, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x41, 0x70,
	0x69, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x41,
	0x70, 0x69, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x15, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x25, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x41, 0x70, 0x69, 0x2e, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6d, 0x67, 0x6d,
	0x74, 0x41, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x15, 0x5a, 0x13, 0x63, 0x64, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_mgmtApi_proto_rawDescOnce sync.Once
	file_mgmtApi_proto_rawDescData = file_mgmtApi_proto_rawDesc
)

func file_mgmtApi_proto_rawDescGZIP() []byte {
	file_mgmtApi_proto_rawDescOnce.Do(func() {
		file_mgmtApi_proto_rawDescData = protoimpl.X.CompressGZIP(file_mgmtApi_proto_rawDescData)
	})
	return file_mgmtApi_proto_rawDescData
}

var file_mgmtApi_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_mgmtApi_proto_goTypes = []any{
	(*UpdateDsListRequest)(nil),           // 0: mgmtApi.UpdateDsListRequest
	(*UpdateDsListResponse)(nil),          // 1: mgmtApi.UpdateDsListResponse
	(*UpdateConfigNodeRequest)(nil),       // 2: mgmtApi.UpdateConfigNodeRequest
	(*UpdateConfigNodeResponse)(nil),      // 3: mgmtApi.UpdateConfigNodeResponse
	(*InvalidateCacheRequest)(nil),        // 4: mgmtApi.InvalidateCacheRequest
	(*InvalidateCacheResponse)(nil),       // 5: mgmtApi.InvalidateCacheResponse
	(*InvalidateCacheStatusRequest)(nil),  // 6: mgmtApi.InvalidateCacheStatusRequest
	(*InvalidateCacheStatusResponse)(nil), // 7: mgmtApi.InvalidateCacheStatusResponse
	(*Config)(nil),                        // 8: mgmtApi.Config
	(*DeliveryService)(nil),               // 9: mgmtApi.DeliveryService
	(*RewriteRule)(nil),                   // 10: mgmtApi.RewriteRule
	(*CacheNode)(nil),                     // 11: mgmtApi.CacheNode
}
var file_mgmtApi_proto_depIdxs = []int32{
	9,  // 0: mgmtApi.UpdateDsListRequest.serviceList:type_name -> mgmtApi.DeliveryService
	11, // 1: mgmtApi.UpdateConfigNodeRequest.node:type_name -> mgmtApi.CacheNode
	9,  // 2: mgmtApi.Config.service_list:type_name -> mgmtApi.DeliveryService
	11, // 3: mgmtApi.Config.node:type_name -> mgmtApi.CacheNode
	10, // 4: mgmtApi.DeliveryService.rewriteRules:type_name -> mgmtApi.RewriteRule
	0,  // 5: mgmtApi.MgmtApi.UpdateDsList:input_type -> mgmtApi.UpdateDsListRequest
	2,  // 6: mgmtApi.MgmtApi.UpdateConfigNode:input_type -> mgmtApi.UpdateConfigNodeRequest
	4,  // 7: mgmtApi.MgmtApi.InvalidateCache:input_type -> mgmtApi.InvalidateCacheRequest
	6,  // 8: mgmtApi.MgmtApi.InvalidateCacheStatus:input_type -> mgmtApi.InvalidateCacheStatusRequest
	1,  // 9: mgmtApi.MgmtApi.UpdateDsList:output_type -> mgmtApi.UpdateDsListResponse
	3,  // 10: mgmtApi.MgmtApi.UpdateConfigNode:output_type -> mgmtApi.UpdateConfigNodeResponse
	5,  // 11: mgmtApi.MgmtApi.InvalidateCache:output_type -> mgmtApi.InvalidateCacheResponse
	7,  // 12: mgmtApi.MgmtApi.InvalidateCacheStatus:output_type -> mgmtApi.InvalidateCacheStatusResponse
	9,  // [9:13] is the sub-list for method output_type
	5,  // [5:9] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_mgmtApi_proto_init() }
func file_mgmtApi_proto_init() {
	if File_mgmtApi_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mgmtApi_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mgmtApi_proto_goTypes,
		DependencyIndexes: file_mgmtApi_proto_depIdxs,
		MessageInfos:      file_mgmtApi_proto_msgTypes,
	}.Build()
	File_mgmtApi_proto = out.File
	file_mgmtApi_proto_rawDesc = nil
	file_mgmtApi_proto_goTypes = nil
	file_mgmtApi_proto_depIdxs = nil
}
